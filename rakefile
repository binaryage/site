# coding: utf-8
require 'colored2'

require_relative '_lib/utils.rb'
require_relative '_lib/site.rb'
require_relative '_lib/workspace.rb'
require_relative '_lib/repo.rb'
require_relative '_lib/build.rb'
require_relative '_lib/store.rb'

## CONFIG ###################################################################################################################

BASE_PORT = 4101
MAIN_PORT = 80 # we will need admin rights to bind to this port when running `rake proxy`
LOCAL_DOMAIN = 'binaryage.org' # this domain is for testing to be set in /etc/hosts, see `rake hosts`

MIN_YARN_VERSION = '0.24.4'
MIN_GEM_VERSION = '1.8.23'

STATIC_CDN_URL = 'https://static.binaryage.com/'
STATIC_CDN_PUSH_URL= 'user_ho054rw1@push-1.cdn77.com:/www/'

ROOT = File.expand_path(File.join(File.dirname(__FILE__)))
NODE_DIR = File.join(ROOT, '_node')
STAGE_DIR = File.join(ROOT, '.stage')
SERVE_DIR = File.join(STAGE_DIR, 'serve')
BUILD_DIR = File.join(STAGE_DIR, 'build')
STORE_DIR = File.join(STAGE_DIR, 'store')

## SITES ####################################################################################################################

$dirs = %w(
www blog support
totalfinder-web totalspaces-web
asepsis-web totalterminal-web visor
firequery firerainbow firelogger xrefresh
drydrop hints restatic-web test-web hodlwallet)

$sites = $dirs.each_with_index.collect { |dir, index| Site.new(File.join(ROOT, dir), BASE_PORT+index, LOCAL_DOMAIN) }

## TASKS ####################################################################################################################

desc 'install yarn dependencies'
task :init_yarn do
  unless Gem::Version.new(`yarn --version`) >= Gem::Version.new(MIN_YARN_VERSION)
    die "install yarn (>=v#{MIN_YARN_VERSION}) => https://yarnpkg.com"
  end
  Dir.chdir NODE_DIR do
    sys('rm -rf node_modules')
    sys('yarn install')
  end
end

desc 'install gem dependencies'
task :init_gem do
  unless Gem::Version.new(`gem --version`) >= Gem::Version.new(MIN_GEM_VERSION)
    die "install rubygems (>=v#{MIN_GEM_VERSION}, no sudo, consider rvm) => http://rubygems.org, http://beginrescueend.com"
  end
  sys('bundle install')
end

desc 'init submodules / hard-links'
task :init_repo do
  init_workspace($sites, get_writable_git_url)
end

desc 'init workspace - needs special care'
task :init => [:init_gem, :init_yarn, :init_repo] do
end

desc 'clean stage'
task :clean do
  sys("rm -rf \"#{SERVE_DIR}\"")
  sys("rm -rf \"#{STAGE_DIR}\"")
end

desc 'reset workspace to match remote changes - this will destroy your local changes!!!'
task :reset => [:clean] do
  reset_workspace($sites)
end

desc 'update workspace to point latest branch tips'
task :update do
  puts "note: #{'to get remote changes'.green} you have to do #{'git fetch'.blue} first"
  update_workspace($sites)
end

desc 'prints info how to setup /etc/hosts'
task :hosts do
  puts prepare_hosts_template($sites)
end

desc 'generate proxy config (for nginx)'
task :proxy_config do
  puts prepare_proxy_config($sites)
end

desc 'start proxy server'
task :proxy do
  trap('INT') do
    exit 10
  end
  config_path = File.join(STAGE_DIR, '.proxy.config')
  sys("rake -s proxy_config > \"#{config_path}\"")
  sys("sudo nginx -c \"#{config_path}\"")
end

desc 'run dev server'
task :serve do
  all_names = sites_subdomains($sites).join(',')
  what = ENV['what'] || die("specify coma separated list of sites to serve, or `rake serve what=all`, full list:\n`rake serve what=#{all_names}`")
  if what=='all'
    what = all_names
  end
  names = clean_names(what.split(','))

  puts "note: #{'make sure you have'.green} #{'/etc/hosts'.yellow} #{'properly configured, see'.green} #{'rake hosts'.blue}"
  serve_sites($sites, SERVE_DIR, names)
end

desc 'build site'
task :build do
  what = (ENV['what'] || sites_subdomains($sites).join(','))
  names = clean_names(what.split(','))

  # TODO: we could bring in more stuff from env
  build_opts = {
      :stage => ENV['stage'] || BUILD_DIR,
      :dev_mode => false,
      :clean_stage => true,
      :busters => true,
      :cdn => true,
      :static_cdn_url => STATIC_CDN_URL,
      :static_cdn_push_url => STATIC_CDN_PUSH_URL
  }

  build_sites($sites, build_opts, names)
end

desc 'generate store template zip' # see https://springboard.fastspring.com/site/configuration/template/doc/templateOverview.xml
task :store do
  build_store($sites.first, {:stage => STORE_DIR,
                             :dont_prune => true,
                             :zip_path => File.join(ROOT, 'store-template.zip')})
end

desc 'inspect the list of sites currently registered'
task :inspect do
  puts $sites
end

desc 'publish all dirty sites, use force=1 to force publishing of all'
task :publish do
  publish_workspace($sites, {:force => ENV['force']=='1',
                             :dont_push => ENV['dont_push']=='1'})
end

task :default => :serve
